(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{294:function(v,_,e){"use strict";e.r(_);var p=e(14),t=Object(p.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("ol",[_("li",[v._v("回调函数")])]),v._v(" "),_("p",[v._v("作为参数传给内部的函数")]),v._v(" "),_("p",[v._v("回调地狱")]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("promise")])]),v._v(" "),_("p",[v._v(".then 链式调用")]),v._v(" "),_("p",[v._v("一个对象、容器。")]),v._v(" "),_("p",[v._v("三种状态，当把一件事情交给promise时，他的状态就是pending，")]),v._v(" "),_("p",[v._v("任务完成他的状态改变。且状态只能改变一次")]),v._v(" "),_("p",[v._v("then catch finally（都会执行）")]),v._v(" "),_("p",[v._v("all 接收数组 可以完成并行任务 数组的每一项都是promise对象 所有的promise的状态都达到resolved的时候，all的方法的状态为resolved 有一个失败 all就失败")]),v._v(" "),_("p",[v._v("发送多个请求、并根据请求顺序获取和使用数据的场景")]),v._v(" "),_("p",[v._v("race 返回最先执行的")]),v._v(" "),_("p",[v._v("里面可以放个延时器 超过多少时间这个promise就不执行了")]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("p",[v._v("generator")])]),v._v(" "),_("li",[_("p",[v._v("async")])])]),v._v(" "),_("p",[v._v("基于generator和promise实现的自动执行的语法糖。")]),v._v(" "),_("p",[v._v("内部自带执行器")]),v._v(" "),_("p",[v._v("当函数内部执行到 await语句的时候 如果语句返回一个promise对象")]),v._v(" "),_("p",[v._v("函数将会等待promise对象的状态编程resolve后再继续向下指向。")])])}),[],!1,null,null,null);_.default=t.exports}}]);