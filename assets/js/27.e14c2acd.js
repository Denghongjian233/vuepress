(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{300:function(n,t,s){"use strict";s.r(t);var e=s(14),o=Object(e.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("p",[this._v("1、单例模式\n单例模式就是一个实例在整个网页的生命周期里只创建一次，后续再调用实例创建函数的时候，返回的仍是之前创建的实例。在实际开发中应用十分广泛，例如页面中的登录框，显示消息的提示窗\n2、策略模式\n策略模式是指将策略（算法）封装起来，策略的目的是将算法和使用分离开。\n3、代理模式\n代理模式很好理解，我们不能直接使用目标函数，而是通过调用代理函数来实现对目标函数的使用。\n4、发布订阅模式\n发布订阅模式在实际应用中非常常见，例如，我们在微信App上关注了某个公众号，当该公众号有新文章发布时，就会通知我们。\n发布订阅模式定义了一种一对多的依赖关系，当“一”发生变化，通知多个依赖。\n5、命令模式\n所谓命令模式就是将下要执行的业务逻辑封装到一个函数或类中，不需要具体谁来执行该命令的")])])}),[],!1,null,null,null);t.default=o.exports}}]);