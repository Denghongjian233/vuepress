(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{301:function(n,s,t){"use strict";t.r(s);var i=t(14),r=Object(i.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("p",[this._v("解决跨域的方法和方案：\n1：通过服务端代理请求。如PHP，服务端语言php是没有跨域限制的，让服务器去别的网站获取内容然后返回给页面。")]),this._v(" "),n("p",[this._v("2：第二种：jsonp跨域\n1. jsonp跨域就是利用script标签的跨域能力请求资源\n2. jsonp与ajax没有半毛钱关系！！\n3. 浏览器的同源策略限制了js的跨域能力，但没有限制link img iframe script 的跨域行为\n实现方式：\n1. 利用js创建一个script标签，把json的url赋给script的scr属性，\n2. 把这个script插入到页面里，让浏览器去跨域获取资源\n3. JS先声明好回调函数，插入页面后会代为执行该函数，并且传入json对象为其参数。\n注意：\n1. jsonp只针对get请求\n2. script标签加载回来的资源会被当成js在全局执行")]),this._v(" "),n("p",[this._v('3：CORS 跨域资源共享(xhr2)\nCORS是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing）\n它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制\n整个CORS通信过程，都是浏览器自动完成，不需要用户参与\n对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样\n实现CORS通信的关键是服务器，只要服务器实现了CORS接口，就可以跨源通信')]),this._v(" "),n("p",[this._v("4：nginx代理跨域\n通过nginx服务器转发跨域请求，达到跨域的目的")])])}),[],!1,null,null,null);s.default=r.exports}}]);